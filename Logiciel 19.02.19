"""
Titre : Logiciel Python projet
Date debut : 5 novembre 2018
Auteurs : Groupe n33 projet
"""
#####################################################################
"""
#Import des paquets
"""
import math

import numpy as np

from scipy.optimize import fsolve

"""
#Definition des variables utilisees
"""

# General
################
Ma = 0.8 * 2 * 14.01 + 0.2 * 2 * 16  # Masse molaire de l'air (sec) (mol/g)
Me = 2 * 1.005 + 16  # Masse molaire de l'eau (mol/g)
R = 8.314  # Constante universelle des gaz parfaits
L = 2.454 * 18  # chaleur latente de vaporisation de l'eau
t = 8  # temps de sechage (heures)
HrMax = 20  # Humidite relatif maximal
m_eau_init = 3  # 3kg d'eau par kg de matiere seche
m_eau_fin = 0.1  # 0.1 kg d'eau par kg de matiere seche
m_bananes = 0.5  # masse de bananes a secher en kg
f_massique_seche = 0.25  # Fraction massique de matiere seche dans la banane
Hainitbananes = 3  # humidite absolue initiale contenu dans les bananes
Hafinbananes = 0.909  # humidite absolue finale contenu dans les bananes
sigma = 5.67 * (10 ** (-8))
La = 2250*10**3 # enthalpie de vaporisation / chaleur latente de l'eau (j/kg)

# Environnement
################
altitude = 60  #altidude de ixelles par rapport a la mer de l'endroit ou il a le sechoir
patm = 101315 * (1 - (0.0065 * altitude / 288.15)) ** 5.255 #pression actuelle totale. Autrement dit la pression
                                                                # ambiante dans le lieu ou se trouve le sechoir.(en Pa)
Fd = 900  # Flux direct produit par les lampes (W/m**2)
Tamb = 273.5+20  # (a l'interieur du batiment de teste) Temperature de l'air ambiante (en Kelvin)
Hr = 0.65  #pour la belgique en % #Humidite relative
psat = 2.3 * 10 ** 3  #pression saturfante a temperature Tamb
Hamax = 0.6217 * HrMax * psat / (patm - HrMax * psat)  #Humidite absolue maximale

# Convection
################
#V =  # vitesse du fluide
#L =  # longueur de la plaque
#mu =  # viscosite dynamique du fluide
#M =  # masse volumique du fluide
#lambdaa =  # conductivite du fluide
#g =  # Force de pesanteur
#dT =  # Difference de temperature
#cp =  # Chaleur specifique du fluide
#beta =  # Coefficient de dilatation

# Effet de Serre
################
h = 2  # coefficient d'echange de chaleur entre la surface et le toit

#####################################################################
"""
#Block Environnement
"""
def psat(T):
    psatT = e**((La/R)*(1/Tamb - 1/T))*psat
    return psatT

def environnement():
    pe = (Hr * psat)  # Pression partielle de vapeur

    Trose = (math.log(pe / psat, math.e) * (-R / L) + 1 / Tamb) ** (-1)  # Temperature de rosee

    Tsky = Tamb * (0.711 + (0.0056 * Trose) + (7.3 * (10 ** -5) * Trose ** 2))  # Tsky

    Ha = (Me / Ma) * ((Hr * psat) / (patm - (Hr * psat)))  # Humidite absolue

    Fi = 5.67 * 10 ** (-8) * Tsky ** 4  # Flux indirect

    # Fd = 900  #Flux direct

    print('pe = ', pe, '\n', 'Trose = ', Trose, '\n', 'Tsky = ', Tsky, '\n', 'Ha = ', Ha, '\n', 'Fi = ', Fi, '\n',
          'Fd = ', Fd)  # debug

    return Fd, Fi, Ha


##########################################
"""
#Block Ventilation
"""

t_sec = t * 60 * 60  # Temps de sechage en secondes

m_matiereseche = f_massique_seche * m_bananes  # Masse de matiere seche

J = ((Hainitbananes - Hafinbananes) * m_matiereseche) / t_sec  # Masse d'eau evaporee par seconde (contenue dans le
# poivre/banane)

Qmin = J / (Hamax - Ha)  # Debit d'air minimal (m^3/s)

print("Le debit d'air minimal en m^3/s est de ", Qmin, " m^3/s")

# print('t_sec = ',t_sec,'m_matiereseche = ',m_matiereseche,'J = ',J,'Qmin = ',Qmin)  #debug

##########################################
"""
#Convexion
"""

def ConvexionH(mu, M, V, L, g, beta, dT, cp, lambdaa ,convexion):

    v = mu / M  # viscosite cinematique du fluide

    Re = (V * L) / v # Nombre de Reynolds

    Gr = (g * beta * dT * L * 3) / (v * 2)  # Nombre de Grashof

    Pr = (mu * cp)/lambdaa  # Nombre de Prandtl

    if Gr/Re < 1:
        convexion = 'Forcee'
    else:
        convexion = 'Naturelle'

    if convection == 'Naturelle':  # Nu = Nombre de Nusselt & cas : convection naturelle
        if Re < 3 * 10 ** 5: # ecoulement laminaire:
            Nu = 0, 479 * Gr ** (1 / 4)
        else: # ecoulement turbulent:
            Nu = 0, 13 * ((Gr * Pr) ** (1 / 3))
    else: # cas : convection naturelle
        if Re < 3.104: # ecoulement laminaire
            Nu = 0, 66 * Pr ** (1 / 3) * (Re ** (1 / 2))
        else: # ecoulement turbulent
            Nu = 0, 036 * (Pr ** (1 / 3)) * (Re ** (4 / 5))

    h = (lamda * Nu) / L

    return h

##########################################
"""
#Block Effet-de-Serre
"""


def func(x):
    P, Ts, Tp = x

    return P - h * (Ts - T) - h * (Tp - T), Fd + Fi - P - (sigma * Tp ** 4), Fd + (sigma * Tp ** 4) - (sigma * Ts ** 4) \
           - h * (Ts - T)


P, Ts, Tp = fsolve(func, (1, 1, 1))

print('La puissance et de ', P, 'W/m^2')


#####################################################################
