"""
Titre : Logiciel Python projet
Date debut : 5 novembre 2018
Date de finalisation du logiciel : 04/03/19
Auteurs : Groupe n°33 projet
"""
#####################################################################
"""
#Import des paquets
"""
import math

import numpy as np

from scipy.optimize import fsolve

"""
#Definition des variables utilisees
"""

# General
################
Ma = 0.8 * 2 * 14.01 + 0.2 * 2 * 16  # Masse molaire de l'air (sec) (mol/g)
Me = 2 * 1.005 + 16  # Masse molaire de l'eau (mol/g)
R = 8.314  # (J/(mol.K) Constante universelle des gaz parfaits
Lakg = 2220 * 10 ** 3  # enthalpie de vaporisation / chaleur latente de l'eau (J/kg)
Lamol = 2220 * 18  # enthalpie de vaporisation / chaleur latente de l'eau (J/mol)
t = 8  # temps de sechage (heures)
HrMax = 0.2  # Humidite relative maximal (adimensionnel)
m_bananes = 0.5  # masse de bananes a secher en kg
f_massique_seche = 1/4  # Fraction massique de matiere seche dans la banane
Hainitbananes = 3  # humidite absolue initiale contenu dans les bananes
Hafinbananes = 0.1  # humidite absolue finale contenu dans les bananes
sigma = 5.670367 * (10 ** (-8)) #(W.m**-2K**-4)



# Environnement
################
patm = 995 * 10**2 # (Pa) Pression atmospherique a bruxelles le mercredi 6 mars 13h
Fd = 900  # Flux direct produit par les lampes (W/m**2)
Tref = 273.5 + 20  # (a l'interieur du batiment de teste) Temperature de l'air ambiante (en Kelvin)
Hr = 0.70  #pour la belgique en % #Humidite relative
psatref = 2340 #pression saturfante a temperature Tamb
Tamb = 273.15 + 18 #Temperature ambiante (K)
Tideal = 273.15 + 65 #Temperature voulue a l'interieur de la serre (K)

# Convection
################
L = 0.6  # (m) longueur de la plaque
mu = 1.8*10**(-5)  # (Pa.s) viscosite dynamique du fluide
rho = 1.225  # (kg/m**3) masse volumique du fluide
lambdaa = 0.0262  # (W/m.K) conductivite du fluide
g = 9.81  # (m/s**2) Force de pesanteur
cp = 1004  # (J/Kg.K) Chaleur specifique du fluide
beta = 1 /Tideal  # (1/K) Coefficient de dilatation

# Effet de Serre
################
h = 4.18  # coefficient d'echange de chaleur entre la surface et le toit
Cma = 1004  # Capacite calorifique massique de l'air J kg**-1 K**−1

#####################################################################
"""
#Block Environnement
"""


def psat_(T): #Formule de Clausius Clap
    psat = psatref * (math.e)**((Lamol/R)*(1/Tref - 1/T))
    return psat


psat = psat_(Tamb) #Calcul de la p de sat a Tamb
pe = (Hr * psat)  # Pression partielle de vapeur
Trose = (math.log(Hr, math.e) * (-R / Lamol) + (1 / Tamb)) ** (-1) - 273.15  # Temperature de rosee
Tsky = Tamb * (0.711 + (0.0056 * Trose) + (7.3 * (10 ** -5) * Trose ** 2))**(1/4)# Tsky
Hamax = (Me / Ma) * ((HrMax * psat_(Tideal)) / (patm - HrMax * psat_(Tideal)))  # Humidite absolue maximale
Ha = (Me / Ma) * (pe / (patm - pe))  # Humidite absolue
Fi = 100 #Flux indirect, pour le prototype de laboratoire il est plus correct de le considerer constant.
#Fi = sigma * (Tsky ** 4)  # Flux indirect
# Fd = 900  #Flux direct

print('pe = ', pe, '\n', 'Trose = ', Trose, '\n', 'Tsky = ', Tsky, '\n', 'Ha = ', Ha, '\n','Hamax = ', Hamax, '\n',
      'Fi = ', Fi, '\n', 'Fd = ', Fd)  # debug

##########################################
"""
#Block Ventilation
"""

t_sec = t * 60 * 60  # Temps de sechage en secondes

m_matiereseche = f_massique_seche * m_bananes  # Masse de matiere seche

J = ((Hainitbananes - Hafinbananes) * m_matiereseche) / t_sec  # Masse d'eau evaporee par seconde (contenue dans le
# poivre/banane)

Qmin = J / (Hamax - Ha)  # Debit d'air minimal (k/s)

print("Le debit d'air minimal en k/s est de ", Qmin, "k/s")

print('t_sec = ',t_sec,'m_matiereseche = ',m_matiereseche,'J = ',J,'Qmin = ',Qmin)  #debug

##########################################
"""
#Convexion
"""


def ConvectionH(mu, rho, L, g, beta, dT, cp, lambdaa):

    V = Qmin/0.0030 #vitesse du fluide (air)

    v = mu / rho  # viscosite cinematique du fluide m**2/s

    Re = (V * L) / v  # Nombre de Reynolds

    Gr = (g * beta * dT * L**3 * rho**2) / mu**2  # Nombre de Grashof

    Pr = (mu * cp)/lambdaa  # Nombre de Prandtl

    Ra = Pr * Gr # Nombre de Nusselt
    Nu = 0.54*Ra**(1/4)

    print("Gr/Re**2 = ", Gr/Re**2)
    print("Re = ", Re)

    h = (Nu * lambdaa) / L

    return h


##########################################
"""
#Block Effet-de-Serre
"""


def func(x):
    P, Ts, Tp = x

    return P - h * (Tp - Tideal) - h * (Ts - Tideal), Fd + Fi - P - (sigma * Tp ** 4), Fd + (sigma * Tp ** 4) - (sigma *
                                                                                            Ts ** 4) - h * (Ts - Tideal)


def effet_de_serre():
    P, Ts, Tp = fsolve(func, (1, 1, 1))
    return P, Ts, Tp

def dimensions(P): #calcul des dimensions du prototype
    Ptot = Qmin * Cma * (Tideal-Tamb) + J * Lakg  # puissance totale
    Surface  = Ptot/P
    print('Ptot = ', Ptot)
    return Surface

#####################################################################

# Lancement du logiciel

h = 4.35
P, Ts, Tp = effet_de_serre()
dT = (Ts - Tideal)
print('dT = ',dT)
h = ConvectionH(mu, rho, L, g, beta, dT, cp, lambdaa)
P, Ts, Tp = effet_de_serre()
Surface = dimensions(P)

print("Tp = ", Tp - 273.15)
print('La puissance et de ', P, 'W/m^2')
print ("h = ", h)
print("dimensions: ", Surface," m**2")



